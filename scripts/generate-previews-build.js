import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
const rootDir = __dirname.includes('node_modules')
  ? path.join(__dirname, '../../..')
  : path.join(__dirname, '..');

// –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const blogPreviewWidth = 400;
const blogPreviewHeight = 210;
const rubricPreviewWidth = 210;
const rubricPreviewHeight = 214;

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤ dist –≤–º–µ—Å—Ç–æ public
const outputDir = path.join(rootDir, 'dist');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é –≤ dist
async function createPreviewForBuild(sourcePath, outputPath, width, height) {
  const previewDir = path.dirname(outputPath);
  if (!fs.existsSync(previewDir)) {
    fs.mkdirSync(previewDir, { recursive: true });
  }

  if (fs.existsSync(outputPath)) {
    return; // –ü—Ä–µ–≤—å—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }

  try {
    await sharp(sourcePath)
      .resize(width, height, { fit: 'cover' })
      .toFile(outputPath);
    console.log(`‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: ${path.relative(rootDir, outputPath)}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é ${outputPath}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏
async function processDirectory(sourceDir, outputSubDir) {
  if (!fs.existsSync(sourceDir)) {
    return;
  }

  const items = fs.readdirSync(sourceDir);
  
  for (const item of items) {
    const sourcePath = path.join(sourceDir, item);
    const stat = fs.statSync(sourcePath);
    
    if (stat.isDirectory()) {
      if (item === 'previews') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ –ø—Ä–µ–≤—å—é
      await processDirectory(sourcePath, path.join(outputSubDir, item));
    } else if (item.match(/\.(webp|jpg|jpeg|png)$/i)) {
      const ext = path.extname(item);
      const name = path.basename(item, ext);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–º–µ—Ä
      const hasResizeSuffix = [400, 800, 1200].some(size => name.includes(`-${size}`));
      if (hasResizeSuffix) continue;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é
      let previewWidth, previewHeight;
      if (sourcePath.includes('/img/default/') && (name.includes('rubric') || name.includes('tag'))) {
        previewWidth = rubricPreviewWidth;
        previewHeight = rubricPreviewHeight;
      } else {
        previewWidth = blogPreviewWidth;
        previewHeight = blogPreviewHeight;
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
      const outputDir = path.join(rootDir, 'dist', outputSubDir, 'previews');
      const outputPath = path.join(outputDir, `${name}${ext}`);
      
      console.log(`üé≠ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —Å–±–æ—Ä–∫–∏: ${name}`);
      await createPreviewForBuild(sourcePath, outputPath, previewWidth, previewHeight);
    }
  }
}

// Main function
async function generatePreviewsForBuild() {
  console.log('üöÄ Starting preview generation for build...');
  
  // Process system folders
  await processDirectory(path.join(rootDir, 'public/img/default'), 'img/default');
  await processDirectory(path.join(rootDir, 'public/img/examples'), 'img/examples');
  
  // Process user images if they exist
  const pageImagesDir = path.join(rootDir, 'public/img/page-images');
  if (fs.existsSync(pageImagesDir)) {
    await processDirectory(pageImagesDir, 'img/page-images');
  }
  
  console.log('‚úÖ Preview generation for build completed!');
}

generatePreviewsForBuild().catch(console.error);
