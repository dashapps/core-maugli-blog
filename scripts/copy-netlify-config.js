#!/usr/bin/env node

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç netlify.toml –∏–∑ –ø–∞–∫–µ—Ç–∞ core-maugli –≤ –ø—Ä–æ–µ–∫—Ç
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function main() {
    try {
        const targetPath = path.join(process.cwd(), 'netlify.toml');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ netlify.toml
        if (fs.existsSync(targetPath)) {
            const existingContent = fs.readFileSync(targetPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            const hasCustomizations = 
                !existingContent.includes('# Auto-copied from core-maugli package') ||
                existingContent.includes('# CUSTOMIZED') ||
                (existingContent.includes('netlify-plugin-bluesky') && !existingContent.includes('# [[plugins]]')) ||
                (existingContent.includes('@supabase/netlify-integration') && !existingContent.includes('# [[plugins]]')) ||
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
                existingContent.split('\n').some(line => 
                    line.trim().startsWith('package = ') && 
                    !['netlify-plugin-astro', '@netlify/plugin-lighthouse', 'netlify-plugin-image-optim', 
                      'netlify-plugin-minify-html', 'netlify-plugin-submit-sitemap'].some(plugin => 
                        line.includes(plugin)
                    )
                );
            
            if (hasCustomizations) {
                console.log('üìã netlify.toml exists and appears customized - skipping copy');
                console.log('üí° To force update: delete netlify.toml and reinstall');
                return;
            } else {
                console.log('üìã netlify.toml exists but not customized - updating to latest template');
                // –°–æ–∑–¥–∞–¥–∏–º –±—ç–∫–∞–ø –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                fs.copyFileSync(targetPath, targetPath + '.backup');
                console.log('üì¶ Created backup: netlify.toml.backup');
            }
        }
        
        // –ò—â–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–∫–µ—Ç–µ
        let sourcePath;
        
        // –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ node_modules
        const nodeModulesPath = path.join(process.cwd(), 'node_modules', 'core-maugli', 'netlify.toml');
        if (fs.existsSync(nodeModulesPath)) {
            sourcePath = nodeModulesPath;
        } 
        // –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ —Å–∞–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        else {
            sourcePath = path.join(__dirname, '..', 'netlify.toml');
        }
        
        if (!fs.existsSync(sourcePath)) {
            console.log('‚ö†Ô∏è  netlify.toml template not found');
            return;
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        fs.copyFileSync(sourcePath, targetPath);
        console.log('‚úÖ netlify.toml copied successfully');
        console.log('');
        console.log('üìù Manual setup required for:');
        console.log('   ‚Ä¢ Bluesky: https://app.netlify.com/extensions/bluesky-custom-domain');
        console.log('   ‚Ä¢ Supabase: https://app.netlify.com/extensions/supabase');
        console.log('');
        console.log('üí° Uncomment plugins in netlify.toml after setup');
        
    } catch (error) {
        console.error('‚ùå Error copying netlify.toml:', error.message);
    }
}

main();
