#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è featured –ø–æ—Å—Ç–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run featured:add post-slug
 * npm run featured:remove post-slug
 * npm run featured:list
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const BLOG_CONTENT_DIR = path.join(__dirname, '../src/content/blog');
const MAX_FEATURED = 3;

const [,, command, postId] = process.argv;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
async function getAllPosts() {
  try {
    const files = await fs.readdir(BLOG_CONTENT_DIR);
    const posts = [];
    
    for (const file of files) {
      if (file.endsWith('.md')) {
        const filePath = path.join(BLOG_CONTENT_DIR, file);
        const content = await fs.readFile(filePath, 'utf-8');
        const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
        
        if (frontmatterMatch) {
          const frontmatter = frontmatterMatch[1];
          const isFeatured = frontmatter.includes('isFeatured: true');
          const titleMatch = frontmatter.match(/title:\s*['"]?(.*?)['"]?\s*$/m);
          const dateMatch = frontmatter.match(/publishDate:\s*['"]?(.*?)['"]?\s*$/m);
          
          posts.push({
            id: file.replace('.md', ''),
            title: titleMatch ? titleMatch[1] : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            publishDate: dateMatch ? new Date(dateMatch[1]) : new Date(),
            isFeatured,
            filePath
          });
        }
      }
    }
    
    return posts;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
    return [];
  }
}

/**
 * –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å isFeatured –≤ frontmatter —Ñ–∞–π–ª–∞
 */
async function setFeaturedStatus(postId, isFeatured) {
  const filePath = path.join(BLOG_CONTENT_DIR, `${postId}.md`);
  
  try {
    const content = await fs.readFile(filePath, 'utf-8');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ frontmatter –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
    
    if (!frontmatterMatch) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω frontmatter –≤ —Ñ–∞–π–ª–µ: ${filePath}`);
    }

    let [, frontmatter, body] = frontmatterMatch;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º isFeatured
    if (frontmatter.includes('isFeatured:')) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      frontmatter = frontmatter.replace(
        /isFeatured:\s*(true|false)/,
        `isFeatured: ${isFeatured}`
      );
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ title (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (frontmatter.includes('title:')) {
        frontmatter = frontmatter.replace(
          /(title:.*\n)/,
          `$1isFeatured: ${isFeatured}\n`
        );
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü frontmatter
        frontmatter = `${frontmatter.trim()}\nisFeatured: ${isFeatured}`;
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const updatedContent = `---\n${frontmatter}\n---\n${body}`;
    await fs.writeFile(filePath, updatedContent, 'utf-8');
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é –≤ featured –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–æ–º
 */
async function addFeatured(newPostId) {
  try {
    const allPosts = await getAllPosts();
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ featured –ø–æ—Å—Ç—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
    const currentFeatured = allPosts
      .filter(post => post.isFeatured)
      .sort((a, b) => a.publishDate.getTime() - b.publishDate.getTime());

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å MAX_FEATURED featured –ø–æ—Å—Ç–æ–≤, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
    if (currentFeatured.length >= MAX_FEATURED) {
      const oldestFeatured = currentFeatured[0];
      await setFeaturedStatus(oldestFeatured.id, false);
      console.log(`üóëÔ∏è –£–±—Ä–∞–ª–∏ –∏–∑ featured —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: ${oldestFeatured.id}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ featured
    await setFeaturedStatus(newPostId, true);
    console.log(`‚≠ê –î–æ–±–∞–≤–∏–ª–∏ –≤ featured: ${newPostId}`);
    
    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ featured –ø–æ—Å—Ç–æ–≤
    await logCurrentFeatured();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ featured –ø–æ—Å—Ç–∞–º–∏:', error);
  }
}

/**
 * –£–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç—å—é –∏–∑ featured
 */
async function removeFeatured(postId) {
  await setFeaturedStatus(postId, false);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ featured –ø–æ—Å—Ç–æ–≤
 */
async function logCurrentFeatured() {
  try {
    const allPosts = await getAllPosts();
    const featured = allPosts
      .filter(post => post.isFeatured)
      .sort((a, b) => b.publishDate.getTime() - a.publishDate.getTime());

    console.log('\nüìå –¢–µ–∫—É—â–∏–µ featured –ø–æ—Å—Ç—ã:');
    featured.forEach((post, index) => {
      console.log(`${index + 1}. ${post.id} (${post.publishDate.toLocaleDateString()})`);
    });
    console.log(`üìä –í—Å–µ–≥–æ featured: ${featured.length}/${MAX_FEATURED}\n`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ featured –ø–æ—Å—Ç–æ–≤:', error);
  }
}

async function main() {
  switch (command) {
    case 'add':
      if (!postId) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞: npm run featured:add post-id');
        process.exit(1);
      }
      await addFeatured(postId);
      break;

    case 'remove':
      if (!postId) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞: npm run featured:remove post-id');
        process.exit(1);
      }
      await removeFeatured(postId);
      console.log(`üóëÔ∏è –£–±—Ä–∞–ª–∏ –∏–∑ featured: ${postId}`);
      await logCurrentFeatured();
      break;

    case 'list':
      await logCurrentFeatured();
      break;

    default:
      console.log(`
üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ featured –ø–æ—Å—Ç–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã:
  add <post-id>    - –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ featured (–º–∞–∫—Å. 3)
  remove <post-id> - –£–±—Ä–∞—Ç—å –ø–æ—Å—Ç –∏–∑ featured
  list            - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ featured –ø–æ—Å—Ç—ã

–ü—Ä–∏–º–µ—Ä—ã:
  npm run featured:add post-1-avtomatizaciya-marketinga-kak-ii-osvobozhdaet-predprinimatelei-ot-cifrovogo-rabstva
  npm run featured:remove post-2-avtomatizaciya-kontenta-kak-neiroseti-ubivayut-perfekcionizm-v-biznese
  npm run featured:list
      `);
  }
}

main().catch(console.error);
