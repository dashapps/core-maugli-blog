#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ netlify.toml –∏–∑ –ø–∞–∫–µ—Ç–∞ core-maugli
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function main() {
    try {
        const targetPath = path.join(process.cwd(), 'netlify.toml');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ netlify.toml —Å –º–∞—Ä–∫–µ—Ä–æ–º "CUSTOMIZED"
        if (fs.existsSync(targetPath)) {
            const existingContent = fs.readFileSync(targetPath, 'utf8');
            
            if (existingContent.includes('# CUSTOMIZED')) {
                console.log('üìã Found "# CUSTOMIZED" marker - preserving entire file');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            fs.copyFileSync(targetPath, targetPath + '.backup');
            console.log('üì¶ Created backup: netlify.toml.backup');
        }
        
        // –ò—â–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–∫–µ—Ç–µ
        let sourcePath;
        const nodeModulesPath = path.join(process.cwd(), 'node_modules', 'core-maugli', 'netlify.toml');
        if (fs.existsSync(nodeModulesPath)) {
            sourcePath = nodeModulesPath;
        } else {
            sourcePath = path.join(__dirname, '..', 'netlify.toml');
        }
        
        if (!fs.existsSync(sourcePath)) {
            console.log('‚ö†Ô∏è  netlify.toml template not found');
            return;
        }
        
        // –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        fs.copyFileSync(sourcePath, targetPath);
        console.log('‚úÖ netlify.toml copied successfully');
        
        console.log('');
        console.log('üí° Add "# CUSTOMIZED" comment to prevent auto-updates');
        
    } catch (error) {
        console.error('‚ùå Error copying netlify.toml:', error.message);
    }
}

main();
