// copy-content-images.cjs - –≤—ã–Ω–æ—Å–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫ public/img –≤ –∫–æ—Ä–µ–Ω—å public/img
const fs = require('fs');
const path = require('path');

const sourceDir = './public/img';
const targetDir = './public/img';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫
async function flattenImages(currentDir) {
    const items = fs.readdirSync(currentDir);
    let copiedCount = 0;

    for (const item of items) {
        const itemPath = path.join(currentDir, item);
        const stat = fs.statSync(itemPath);

        if (stat.isDirectory()) {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            const copied = await flattenImages(itemPath);
            copiedCount += copied;
        } else if (stat.isFile()) {
            const ext = path.extname(item).toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —á—Ç–æ –æ–Ω–æ –ù–ï –≤ –∫–æ—Ä–Ω–µ public/img
            if (['.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg'].includes(ext)) {
                const isInSubfolder = currentDir !== sourceDir;
                
                if (isInSubfolder) {
                    const targetPath = path.join(sourceDir, item);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ
                    if (!fs.existsSync(targetPath)) {
                        fs.copyFileSync(itemPath, targetPath);
                        console.log(`üìã –í—ã–Ω–µ—Å–µ–Ω–æ: ${path.relative('./public', itemPath)} ‚Üí img/${item}`);
                        copiedCount++;
                    } else {
                        // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–∞–ø–∫–∏
                        const folderName = path.basename(currentDir);
                        const nameWithoutExt = path.parse(item).name;
                        const extension = path.parse(item).ext;
                        const newName = `${folderName}_${nameWithoutExt}${extension}`;
                        const targetPathWithPrefix = path.join(sourceDir, newName);
                        
                        if (!fs.existsSync(targetPathWithPrefix)) {
                            fs.copyFileSync(itemPath, targetPathWithPrefix);
                            console.log(`üìã –í—ã–Ω–µ—Å–µ–Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: ${path.relative('./public', itemPath)} ‚Üí img/${newName}`);
                            copiedCount++;
                        } else {
                            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${item}`);
                        }
                    }
                }
            }
        }
    }

    return copiedCount;
}

async function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–Ω–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫ public/img –≤ –∫–æ—Ä–µ–Ω—å public/img...');
    
    if (!fs.existsSync(sourceDir)) {
        console.log(`üìÅ –ü–∞–ø–∫–∞ ${sourceDir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
        return;
    }
    
    // –í—ã–Ω–æ—Å–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–æ–¥–ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–µ–Ω—å
    const totalCopied = await flattenImages(sourceDir);
    
    console.log('');
    console.log(`‚úÖ –í—ã–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${totalCopied} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ—Ä–µ–Ω—å public/img/`);
    console.log('üîÑ Netlify Image Optimization —Ç–µ–ø–µ—Ä—å —Å–º–æ–∂–µ—Ç –∏—Ö –ª–µ–≥—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å');
    console.log('‚ö° Sharp –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ —Ñ–∞–π–ª–∞–º –≤ –∫–æ—Ä–Ω–µ');
    console.log('üìÅ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ /img/–∏–º—è_—Ñ–∞–π–ª–∞.webp');
}

main().catch(console.error);
