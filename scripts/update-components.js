#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath, pathToFileURL } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –ø–∞–ø–∫–∏
const isInNodeModules = __dirname.includes('node_modules');
const isSourceProject = !isInNodeModules && (
  __dirname.includes('core-maugli-blog') || 
  process.cwd().includes('core-maugli-blog') ||
  __dirname.includes('core-maugli')
);

const packageRoot = isInNodeModules 
  ? path.join(__dirname, '../../..', 'node_modules', 'core-maugli') // –∏–∑ node_modules
  : path.join(__dirname, '..'); // –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤

const userRoot = isInNodeModules
  ? path.join(__dirname, '../../..') // –∫–æ—Ä–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  : process.env.INIT_CWD || process.cwd(); // –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

// Debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEBUG=true
const DEBUG = process.env.DEBUG === 'true';

if (DEBUG) {
    console.log('üîç Debug paths:');
    console.log('  __dirname:', __dirname);
    console.log('  isInNodeModules:', isInNodeModules);
    console.log('  isSourceProject:', isSourceProject);
    console.log('  packageRoot:', packageRoot);
    console.log('  userRoot:', userRoot);
    console.log('  packageRoot === userRoot:', packageRoot === userRoot);
}

// –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)
const FORCE_UPDATE_PATHS = [
  'src/components',
  'src/layouts', 
  'src/pages',
  'src/utils',
  'src/scripts',
  'src/icons',
  'src/i18n',
  'scripts', // –°–∫—Ä–∏–ø—Ç—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è generate-previews.js)
  'typograf-batch.js', // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
  'resize-all.cjs', // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ—Å–∞–π–∑–∞
  'public/flags',
  'public/img/default'
  // –ò—Å–∫–ª—é—á–∏–ª–∏ src/styles - –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
];

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
const PRESERVE_PATHS = [
  'src/content',
  'src/config/maugli.config.ts', // –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ upgrade-config.js
  'src/styles/global.css', // –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  'package.json',
  'astro.config.mjs',
  'tailwind.config.js',
  'tsconfig.json',
  'scripts/custom-*' // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º custom-
];

async function updateConfigVersion() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json –ø–∞–∫–µ—Ç–∞
    const packageJsonPath = path.join(packageRoot, 'package.json');
    const packageJsonContent = await fs.readFile(packageJsonPath, 'utf-8');
    const packageData = JSON.parse(packageJsonContent);
    const newVersion = packageData.version;

    // –ü—É—Ç—å –∫ package.json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPackageJsonPath = path.join(userRoot, 'package.json');
    
    try {
      // –ß–∏—Ç–∞–µ–º package.json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userPackageContent = await fs.readFile(userPackageJsonPath, 'utf-8');
      const userPackageData = JSON.parse(userPackageContent);
      
      let updated = false;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      if (userPackageData.dependencies && userPackageData.dependencies['core-maugli']) {
        const currentVersion = userPackageData.dependencies['core-maugli'];
        if (currentVersion !== `^${newVersion}`) {
          userPackageData.dependencies['core-maugli'] = `^${newVersion}`;
          updated = true;
        }
      }
      
      if (userPackageData.devDependencies && userPackageData.devDependencies['core-maugli']) {
        const currentVersion = userPackageData.devDependencies['core-maugli'];
        if (currentVersion !== `^${newVersion}`) {
          userPackageData.devDependencies['core-maugli'] = `^${newVersion}`;
          updated = true;
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º build —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
      if (userPackageData.scripts) {
        const expectedBuildScript = "node typograf-batch.js && node scripts/generate-previews.js && node scripts/verify-assets.js && astro build";
        const currentBuildScript = userPackageData.scripts.build;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ build —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é
        if (currentBuildScript && !currentBuildScript.includes('generate-previews.js')) {
          // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é –≤ build –ø—Ä–æ—Ü–µ—Å—Å
          if (currentBuildScript.includes('astro build')) {
            userPackageData.scripts.build = currentBuildScript.replace(
              'astro build',
              'node scripts/generate-previews.js && astro build'
            );
            updated = true;
            console.log('üì¶ Added generate-previews.js to build script');
          }
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª sw.js.astro –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PWA –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
      await createPWAServiceWorkerFile();
      
      if (updated) {
        await fs.writeFile(userPackageJsonPath, JSON.stringify(userPackageData, null, 2) + '\n', 'utf-8');
        console.log(`üì¶ Updated package.json with version ^${newVersion}`);
      } else {
        console.log(`üì¶ Package.json already up to date`);
      }
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log('üì¶ User package.json not found, skipping version update');
      } else {
        console.warn('Warning: Could not update package.json version:', error.message);
      }
    }
  } catch (error) {
    console.warn('Warning: Could not read package version:', error.message);
  }
}

async function createPWAServiceWorkerFile() {
  try {
    const swPath = path.join(userRoot, 'src/pages/sw.js.astro');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
    try {
      await fs.stat(swPath);
      console.log('üîß PWA service worker file already exists, skipping...');
      return;
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    }
    
    const swContent = `---
// Astro page –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ service worker –∑–∞–ø—Ä–æ—Å–æ–≤ PWA
// –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –≤ dev —Ä–µ–∂–∏–º–µ
---

<script>
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π service worker
  if (typeof window !== 'undefined') {
    window.location.href = '/dev-dist/sw.js';
  }
</script>`;

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.mkdir(path.dirname(swPath), { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    await fs.writeFile(swPath, swContent, 'utf-8');
    console.log('üîß Created PWA service worker file: src/pages/sw.js.astro');
  } catch (error) {
    console.warn('Warning: Could not create PWA service worker file:', error.message);
  }
}

async function copyDirectory(src, dest) {
  try {
    await fs.mkdir(dest, { recursive: true });
    
    const entries = await fs.readdir(src, { withFileTypes: true });
    
    for (const entry of entries) {
      const srcPath = path.join(src, entry.name);
      const destPath = path.join(dest, entry.name);
      
      if (entry.isDirectory()) {
        await copyDirectory(srcPath, destPath);
      } else {
        await fs.copyFile(srcPath, destPath);
        console.log(`Updated: ${path.relative(userRoot, destPath)}`);
      }
    }
  } catch (error) {
    console.warn(`Warning: Could not copy ${src} to ${dest}:`, error.message);
  }
}

async function updateStyles() {
  const srcStylesPath = path.join(packageRoot, 'src/styles');
  const destStylesPath = path.join(userRoot, 'src/styles');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ styles –≤ –ø–∞–∫–µ—Ç–µ
    await fs.stat(srcStylesPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏
    try {
      const userGlobalCss = path.join(destStylesPath, 'global.css');
      await fs.stat(userGlobalCss);
      console.log('üìù Preserving user styles (global.css exists)');
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∏–ª–µ–π, –Ω–µ —Ç—Ä–æ–≥–∞—è global.css
      const entries = await fs.readdir(srcStylesPath, { withFileTypes: true });
      await fs.mkdir(destStylesPath, { recursive: true });
      
      for (const entry of entries) {
        if (entry.name !== 'global.css') {
          const srcFile = path.join(srcStylesPath, entry.name);
          const destFile = path.join(destStylesPath, entry.name);
          await fs.copyFile(srcFile, destFile);
          console.log(`Updated style: ${entry.name}`);
        }
      }
    } catch {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –Ω–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ
      await copyDirectory(srcStylesPath, destStylesPath);
      console.log('üìù Copied default styles');
    }
  } catch (error) {
    console.warn('Warning: Could not update styles:', error.message);
  }
}

async function updateComponents() {
  console.log('üîÑ Updating Maugli components and assets...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ (—á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫–∏)
  if (isSourceProject) {
    console.log('‚ö†Ô∏è  Skipping component update (running in source project)');
    return;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  if (packageRoot === userRoot) {
    console.log('‚ö†Ô∏è  Skipping component update (packageRoot equals userRoot)');
    return;
  }
  
  let updatedCount = 0;
  
  for (const updatePath of FORCE_UPDATE_PATHS) {
    const srcPath = path.join(packageRoot, updatePath);
    const destPath = path.join(userRoot, updatePath);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞/—Ñ–∞–π–ª
      const stats = await fs.stat(srcPath);
      
      if (stats.isDirectory()) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É –∏ –∫–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é
        try {
          await fs.rm(destPath, { recursive: true, force: true });
        } catch (e) {
          // –ü–∞–ø–∫–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        }
        
        await copyDirectory(srcPath, destPath);
        updatedCount++;
      } else if (stats.isFile()) {
        // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        await fs.mkdir(path.dirname(destPath), { recursive: true });
        await fs.copyFile(srcPath, destPath);
        console.log(`Updated: ${path.relative(userRoot, destPath)}`);
        updatedCount++;
      }
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.warn(`Warning: Could not update ${updatePath}:`, error.message);
      }
    }
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
  await updateStyles();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥–µ
  await updateConfigVersion();
  
  console.log(`‚úÖ Updated ${updatedCount} component directories/files`);
}

async function main() {
  try {
    await updateComponents();
    console.log('üéâ Component update completed successfully!');
  } catch (error) {
    console.error('‚ùå Component update failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === pathToFileURL(process.argv[1]).href) {
  main();
}

export { updateComponents };
