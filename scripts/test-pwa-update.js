#!/usr/bin/env node

import { readFile } from 'fs/promises';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function testPWAConfig() {
  try {
    const configPath = join(__dirname, '..', 'astro.config.mjs');
    const configContent = await readFile(configPath, 'utf-8');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º PWA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ astro.config.mjs...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VitePWA
    const hasVitePWA = configContent.includes('VitePWA');
    const hasPWAImport = configContent.includes('vite-plugin-pwa');
    
    console.log(`‚úÖ VitePWA plugin: ${hasVitePWA ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    console.log(`‚úÖ vite-plugin-pwa import: ${hasPWAImport ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º manifest
    const hasManifest = configContent.includes('manifest');
    console.log(`‚úÖ Manifest config: ${hasManifest ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º service worker (workbox config)
    const hasWorkbox = configContent.includes('workbox');
    console.log(`‚úÖ Workbox config: ${hasWorkbox ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º pwaOptions
    const hasPWAOptions = configContent.includes('pwaOptions');
    console.log(`‚úÖ PWA Options: ${hasPWAOptions ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º registerType
    const hasRegisterType = configContent.includes('registerType');
    console.log(`‚úÖ Register Type: ${hasRegisterType ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    if (hasVitePWA && hasPWAImport && hasManifest && hasWorkbox && hasPWAOptions) {
      console.log('\nüöÄ PWA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!');
      console.log('üí° –≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–ª–æ–≥–∞—Ö');
    } else {
      console.log('\n‚ö†Ô∏è  PWA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PWA:', error.message);
  }
}

testPWAConfig();
