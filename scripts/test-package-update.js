#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function testPackageJsonUpdate() {
  console.log('üß™ Testing package.json version update...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π package.json
  const testPackageJson = {
    "name": "test-blog",
    "version": "1.0.0",
    "dependencies": {
      "core-maugli": "^1.2.3",
      "astro": "^5.5.6"
    }
  };
  
  const testPath = path.join(__dirname, 'test-package.json');
  await fs.writeFile(testPath, JSON.stringify(testPackageJson, null, 2), 'utf-8');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ package.json
    const packageJsonPath = path.join(__dirname, '../package.json');
    const packageJsonContent = await fs.readFile(packageJsonPath, 'utf-8');
    const packageData = JSON.parse(packageJsonContent);
    const newVersion = packageData.version;

    // –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π package.json
    const testPackageContent = await fs.readFile(testPath, 'utf-8');
    const testPackageData = JSON.parse(testPackageContent);
    
    console.log(`üì¶ Current test dependency: core-maugli@${testPackageData.dependencies['core-maugli']}`);
    console.log(`üì¶ New version: ${newVersion}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    if (testPackageData.dependencies && testPackageData.dependencies['core-maugli']) {
      const currentVersion = testPackageData.dependencies['core-maugli'];
      if (currentVersion !== `^${newVersion}`) {
        testPackageData.dependencies['core-maugli'] = `^${newVersion}`;
        
        await fs.writeFile(testPath, JSON.stringify(testPackageData, null, 2) + '\n', 'utf-8');
        console.log(`‚úÖ Updated dependency: ${currentVersion} ‚Üí ^${newVersion}`);
      } else {
        console.log(`‚úÖ Dependency already up to date: ^${newVersion}`);
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedContent = await fs.readFile(testPath, 'utf-8');
    console.log('\nüìã Updated test package.json:');
    console.log(updatedContent);
    
  } finally {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await fs.unlink(testPath);
  }
}

testPackageJsonUpdate();
