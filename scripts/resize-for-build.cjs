// resize-for-build.cjs - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å–∞–π–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∫–∏
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// –†–∞–∑–º–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const sizes = [400, 800, 1200];

const inputDir = './public';
const outputDir = './dist'; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä—è–º–æ –≤ dist
const processedFiles = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDir(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø–∞–ø–æ–∫
function processDirectory(dir, relativePath = '') {
  if (!fs.existsSync(dir)) {
    console.log(`–ü–∞–ø–∫–∞ ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    return;
  }

  const items = fs.readdirSync(dir);
  
  items.forEach(item => {
    const itemPath = path.join(dir, item);
    const stat = fs.statSync(itemPath);
    const currentRelativePath = path.join(relativePath, item);
    
    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      processDirectory(itemPath, currentRelativePath);
    } else if (stat.isFile()) {
      const ext = path.extname(item).toLowerCase();
      const baseName = path.basename(item, ext);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–º–µ—Ä –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (['.jpg', '.jpeg', '.png', '.webp'].includes(ext)) {
        // –ò—Å–∫–ª—é—á–∞–µ–º PWA –∏–∫–æ–Ω–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
        const excludePatterns = [
          'icon-192', 'icon-512', // PWA –∏–∫–æ–Ω–∫–∏
          'favicon', // –§–∞–≤–∏–∫–æ–Ω–∫–∏
          'logo', // –õ–æ–≥–æ—Ç–∏–ø—ã
          'manifest' // –§–∞–π–ª—ã –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        ];
        
        const shouldExclude = excludePatterns.some(pattern => baseName.includes(pattern));
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–º–µ—Ä
        const hasResizeSuffix = sizes.some(size => baseName.includes(`-${size}`));
        
        if (!hasResizeSuffix && !shouldExclude && !processedFiles.has(itemPath)) {
          processedFiles.add(itemPath);
          
          console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è —Å–±–æ—Ä–∫–∏: ${currentRelativePath}`);
          
          // –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
          const outputDirPath = path.join(outputDir, relativePath);
          ensureDir(outputDirPath);
          
          const originalOutputPath = path.join(outputDirPath, item);
          if (!fs.existsSync(originalOutputPath)) {
            fs.copyFileSync(itemPath, originalOutputPath);
            console.log(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: ${path.relative('./dist', originalOutputPath)}`);
          }
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Å–∞–π–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
          sizes.forEach(width => {
            const outputPath = path.join(outputDirPath, `${baseName}-${width}${ext}`);
            
            if (!fs.existsSync(outputPath)) {
              sharp(itemPath)
                .resize(width)
                .toFile(outputPath, (err) => {
                  if (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${outputPath}:`, err.message);
                  } else {
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${path.relative('./dist', outputPath)}`);
                  }
                });
            }
          });
        }
      }
    }
  });
}

// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
ensureDir(outputDir);

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∫–∏...');
processDirectory(inputDir);
console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
