// resize-all.cjs - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ä–µ—Å–∞–π–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// –†–∞–∑–º–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const sizes = [400, 800, 1200];

const inputDir = './public';
const processedFiles = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø–∞–ø–æ–∫
function processDirectory(dir) {
  if (!fs.existsSync(dir)) {
    console.log(`–ü–∞–ø–∫–∞ ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    return;
  }

  const items = fs.readdirSync(dir);
  
  items.forEach(item => {
    const itemPath = path.join(dir, item);
    const stat = fs.statSync(itemPath);
    
    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      processDirectory(itemPath);
    } else if (stat.isFile()) {
      const ext = path.extname(item).toLowerCase();
      const baseName = path.basename(item, ext);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–º–µ—Ä –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (['.jpg', '.jpeg', '.png', '.webp'].includes(ext)) {
        // –ò—Å–∫–ª—é—á–∞–µ–º PWA –∏–∫–æ–Ω–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
        const excludePatterns = [
          'icon-192', 'icon-512', // PWA –∏–∫–æ–Ω–∫–∏
          'favicon', // –§–∞–≤–∏–∫–æ–Ω–∫–∏
          'logo', // –õ–æ–≥–æ—Ç–∏–ø—ã (—á–∞—Å—Ç–æ SVG, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
          'manifest' // –§–∞–π–ª—ã –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        ];
        
        const shouldExclude = excludePatterns.some(pattern => baseName.includes(pattern));
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, image-400.webp, image-800-800.webp)
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å -400, -800, -1200 –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const hasResizeSuffix = sizes.some(size => baseName.includes(`-${size}`));
        
        if (!hasResizeSuffix && !shouldExclude && !processedFiles.has(itemPath)) {
          processedFiles.add(itemPath);
          
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${itemPath}`);
          
          sizes.forEach(width => {
            const outputPath = path.join(path.dirname(itemPath), `${baseName}-${width}${ext}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!fs.existsSync(outputPath)) {
              sharp(itemPath)
                .resize(width)
                .toFile(outputPath, (err) => {
                  if (err) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${outputPath}:`, err.message);
                  } else {
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω: ${path.relative('./public', outputPath)}`);
                  }
                });
            } else {
              console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${path.relative('./public', outputPath)}`);
            }
          });
        }
      }
    }
  });
}

console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Å–∞–π–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
processDirectory(inputDir);
console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
