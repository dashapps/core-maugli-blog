---
import { maugliConfig } from '../config/maugli.config';
import { LANGUAGES } from '../i18n/languages';
import BlueskyIcon from '../icons/socials/BlueskyIcon.astro';
import EmailIcon from '../icons/socials/EmailIcon.astro';
import LinkedinIcon from '../icons/socials/LinkedinIcon.astro';
import MastodonIcon from '../icons/socials/MastodonIcon.astro';
import MediumIcon from '../icons/socials/MediumIcon.astro';
import RedditIcon from '../icons/socials/RedditIcon.astro';
import TelegramIcon from '../icons/socials/TelegramIcon.astro';
import TwitterIcon from '../icons/socials/TwitterIcon.astro';
import AuthorLink from './AuthorLink.astro';
// Универсальный импорт словарей по доступным языкам
const dicts: Record<string, any> = {};
for (const lang of LANGUAGES) {
    try {
        dicts[lang.code] = await import(`../i18n/${lang.code}.json`).then((m) => m.default);
    } catch {}
}

export interface Props {
    socials?: {
        email?: string;
        telegram?: string;
        mastodon?: string;
        medium?: string;
        bluesky?: string;
        reddit?: string;
        linkedin?: string;
        twitter?: string;
    };
    authorName: string;
    maxLinks?: number;
    showContestButton?: boolean;
    contestUrl?: string;
    contestLabel?: string;
    showRss?: boolean;
    rssLang?: string;
}

const {
    socials,
    authorName,
    maxLinks = 3,
    showContestButton = false,
    contestUrl = '#',
    contestLabel = 'Конкурс',
    showRss = false,
    rssLang = 'en'
} = Astro.props;

// Все доступные платформы в нужном порядке
const allPlatforms = ['email', 'linkedin', 'twitter', 'telegram', 'reddit', 'medium', 'mastodon', 'bluesky'];

// Берем первые maxLinks платформ
const platformsToShow = allPlatforms.slice(0, maxLinks);

// Функция для получения компонента иконки
const getIconComponent = (platform: string) => {
    switch (platform) {
        case 'email':
            return EmailIcon;
        case 'telegram':
            return TelegramIcon;
        case 'mastodon':
            return MastodonIcon;
        case 'medium':
            return MediumIcon;
        case 'bluesky':
            return BlueskyIcon;
        case 'reddit':
            return RedditIcon;
        case 'linkedin':
            return LinkedinIcon;
        case 'twitter':
            return TwitterIcon;
        default:
            return EmailIcon;
    }
};

const lang = maugliConfig.defaultLang || 'en';
const dict = dicts[lang] || dicts['en'] || {};
---

{
    (platformsToShow.length > 0 || showContestButton) && (
        <div class="flex flex-row flex-wrap items-center justify-start p-0 gap-2 shrink-0">
            {platformsToShow.map((platform) => {
                const IconComponent = getIconComponent(platform);
                const rawUrl = socials?.[platform as keyof typeof socials];
                // Для email добавляем mailto: если его нет
                const url = platform === 'email' && rawUrl && !rawUrl.startsWith('mailto:') ? `mailto:${rawUrl}` : rawUrl;
                const platformLabel = dict.socials[platform] || platform;
                const ariaLabel = `${authorName} ${dict.pages.authors.onPlatform} ${platformLabel}`;
                return <AuthorLink href={url} platform={platform} icon={IconComponent} ariaLabel={ariaLabel} />;
            })}
            {showContestButton && (
                <a
                    href={contestUrl}
                    class="flex items-center justify-center w-7 h-7 border border-[var(--text-main)] rounded-circle shrink-0 opacity-30 hover:opacity-100 hover:border-[var(--text-main)] transition-all duration-300 bg-transparent text-[var(--text-main)] text-xs font-bold"
                    style="text-decoration: none; padding: 0;"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    {contestLabel}
                </a>
            )}
            {showRss &&
                (rssLang === 'ru' ? (
                    <a class="footer-link ml-2 flex items-center text-muted" href="/rss.xml" target="_blank" rel="noopener" style="color:var(--text-muted);">
                        RSS
                    </a>
                ) : (
                    <a class="footer-link ml-2 flex items-center rss-outline" href="/rss.xml" aria-label="RSS" target="_blank" rel="noopener">
                        <svg
                            width="20"
                            height="20"
                            viewBox="0 0 22 22"
                            fill="none"
                            stroke="var(--text-muted)"
                            stroke-width="1.7"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            style="display:inline;vertical-align:middle;"
                        >
                            <circle cx="6.18" cy="17.82" r="2.18" fill="none" stroke="var(--text-muted)" stroke-width="1.7" />
                            <path d="M4 4a16 16 0 0 1 16 16" />
                            <path d="M4 11a9 9 0 0 1 9 9" />
                        </svg>
                    </a>
                ))}
        </div>
    )
}
