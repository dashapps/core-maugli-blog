---
import type { GetStaticPathsOptions, Page } from 'astro';
import { getEntry, type CollectionEntry } from 'astro:content';
import { getFilteredCollection } from '../../../utils/content-loader';
import Breadcrumbs from '../../../components/Breadcrumbs.astro';
import Pagination from '../../../components/Pagination.astro';
import PostPreview from '../../../components/PostPreview.astro';
import Subscribe from '../../../components/Subscribe.astro';
import TagsSection from '../../../components/TagsSection.astro';
import { maugliConfig } from '../../../config/maugli.config';
import siteConfig from '../../../data/site-config';
import { LANGUAGES } from '../../../i18n/languages';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getAllTags, getPostsByTag, sortItemsWithFeaturedFirst } from '../../../utils/data-utils';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
    const posts = (await getFilteredCollection('blog')).sort(sortItemsWithFeaturedFirst);
    const tags = getAllTags(posts);

    return tags.flatMap((tag) => {
        const filteredPosts = getPostsByTag(posts, tag.id);
        return paginate(filteredPosts, {
            params: { id: tag.id },
            pageSize: siteConfig.postsPerPage || 4
        });
    });
}

type Props = { page: Page<CollectionEntry<'blog'>> };

const { page } = Astro.props;
const blog = page.data;
const params = Astro.params;
const allPosts = await getFilteredCollection('blog');
const allTags = getAllTags(allPosts);
const allRubrics = await getFilteredCollection('tags');
const currentTag = allTags.find((tag) => tag.id === params.id);

// Получаем все теги с количеством постов для TagsSection
let tagsWithCount = allTags.map((tag) => {
    // Проверяем, есть ли карточка рубрики для этого тега
    const hasRubricCard = allRubrics.some((rubric) => rubric.data.slug === tag.id);
    return {
        id: tag.id,
        name: tag.name,
        count: getPostsByTag(allPosts, tag.id).length,
        isRubric: hasRubricCard
    };
});

tagsWithCount = [...tagsWithCount.filter((tag) => tag.isRubric), ...tagsWithCount.filter((tag) => !tag.isRubric)];

// Получаем рубрику из коллекции tags (если есть)
const rubric = allRubrics.find((tag) => tag.data.slug === params.id && tag.data.isRubric);
let rubricCard = null;
if (rubric) {
    const postCount = getPostsByTag(allPosts, rubric.data.slug).length;
    const lastPost = allPosts
        .filter((post) => (post.data.tags || []).includes(rubric.data.slug))
        .sort((a, b) => new Date(b.data.updatedDate || b.data.publishDate).getTime() - new Date(a.data.updatedDate || a.data.publishDate).getTime())[0];
    const updatedAt = lastPost ? lastPost.data.updatedDate || lastPost.data.publishDate : undefined;
    rubricCard = {
        slug: rubric.data.slug,
        title: rubric.data.title,
        description: rubric.data.description,
        image: rubric.data.image,
        postCount,
        updatedAt,
        quote: rubric.data.quote,
        isFeatured: rubric.data.isFeatured
    };
}
const rubricsSection = await getEntry('pages', 'rubrics');

const dicts: Record<string, any> = Object.fromEntries(LANGUAGES.map((l) => [l.code, l.dict]));
const lang: string = typeof maugliConfig.defaultLang === 'string' && dicts[maugliConfig.defaultLang] ? maugliConfig.defaultLang : 'en';
const dict = dicts[lang] || dicts['en'];

function interpolate(str, vars) {
    return str.replace(/\{(\w+)\}/g, (_, k) => vars[k] ?? '');
}

const tagName = rubricCard ? rubricCard.title : currentTag?.name;
const titleTemplate = dict.pages?.tags?.titleWithTag || dicts['en'].pages.tags.titleWithTag || 'Posts tagged {tag}';
const descTemplate =
    dict.pages?.tags?.descriptionWithTag || dicts['en'].pages.tags.descriptionWithTag || 'Explore a curated collection of blog posts under {tag}';
const pageTitle = interpolate(titleTemplate, { tag: tagName });
const pageDesc = interpolate(descTemplate, { tag: tagName });
---

<BaseLayout title={pageTitle} description={pageDesc} image={{ src: '/dante-preview.jpg', alt: 'The preview of the site' }} showHeader={false} fullWidth={true}>
    <div class="max-w-[1280px] mx-auto">
        <Breadcrumbs />

        <div class="mb-12 sm:mb-16">
            <h1 class="mb-4 text-3xl leading-tight font-serif font-[800] sm:text-5xl" style="color: var(--text-heading)">
                {currentTag?.name}
            </h1>
        </div>
        <TagsSection tags={tagsWithCount} totalCount={allPosts.length} activeTagId={params.id} />
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 mb-16">
            {blog.map((post) => <PostPreview post={post} />)}
        </div>

        <!-- Пагинация (показывается только если больше одной страницы) -->
        {page.lastPage > 1 && <Pagination page={page} class="my-16 sm:my-24" />}
        {/* InfoCard о рубриках перенесён на страницу всех тегов */}
    </div>
    <Subscribe class="my-16 sm:my-24" />
</BaseLayout>
