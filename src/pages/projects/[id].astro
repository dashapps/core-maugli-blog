---
import { getCollection, render, type CollectionEntry } from 'astro:content';
import ArticleMeta from '../../components/ArticleMeta.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import ContentFooter from '../../components/ContentFooter.astro';
import HeroImage from '../../components/HeroImage.astro';
import ProductBannerCard from '../../components/ProductBannerCard.astro';
import ProjectPreview from '../../components/ProjectPreview.astro';
import SummaryFAQCard from '../../components/SummaryFAQCard.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import TagsAndShare from '../../components/TagsAndShare.astro';
import { maugliConfig } from '../../config/maugli.config';
import { LANGUAGES } from '../../i18n/languages';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { calculateReadingTime } from '../../utils/reading-time';

export async function getStaticPaths() {
    const projects = (await getCollection('projects')).sort(sortItemsByDateDesc);
    const projectCount = projects.length;
    return projects.map((project, index) => ({
        params: { id: project.id },
        props: {
            project,
            prevProject: index + 1 !== projectCount ? projects[index + 1] : null,
            nextProject: index !== 0 ? projects[index - 1] : null
        }
    }));
}

type Props = {
    project: CollectionEntry<'projects'>;
    prevProject: CollectionEntry<'projects'>;
    nextProject: CollectionEntry<'projects'>;
};

const { href } = Astro.url;
const { project, prevProject, nextProject } = Astro.props;
const { title, description, seo, image, tags = [], publishDate } = project.data;
const { Content, headings } = await render(project);

// Вычисляем время чтения на основе контента
const readingTime = calculateReadingTime(project.body || '');

// Преобразуем встроенные заголовки Astro в нужный формат
const tocItems = headings
    .filter((heading) => heading.depth === 2 || heading.depth === 3) // Только H2 и H3
    .map((heading) => ({
        title: heading.text,
        id: heading.slug
    }));

const productIds = project.data.products || [];
const allProducts = await getCollection('products');
const products = productIds.map((id) => allProducts.find((p) => p.id === id)).filter(Boolean);

const lang: string = typeof maugliConfig.defaultLang === 'string' ? maugliConfig.defaultLang : 'en';
const languageObj = LANGUAGES.find((l) => l.code === lang) || LANGUAGES.find((l) => l.code === 'en');
const fallbackDict = LANGUAGES.find((l) => l.code === 'en')?.dict || {};
const dict = languageObj?.dict && Object.keys(languageObj.dict).length > 0 ? languageObj.dict : fallbackDict;
const pages = (dict as any).pages || (fallbackDict as any).pages || {};
const moreByTag = pages.projects?.moreByTag || 'More cases';
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? description} image={seo?.image} pageType="article" showHeader={false} fullWidth={true}>
    <!-- Расширяем контейнер для двухколоночной структуры -->
    <div class="w-full max-w-none lg:max-w-[1280px] mx-auto lg:px-8 mt-2">
        <!-- Хлебные крошки -->
        <div class="px-4 md:px-0">
            <Breadcrumbs />
        </div>

        <!-- Метаинформация над картинкой -->

        <article class="mb-16 sm:mb-24 max-w-3xl mx-auto lg:max-w-none">
            <HeroImage
                src={seo?.image?.src || image?.src || '/default.webp'}
                alt={seo?.image?.alt || image?.alt || title || 'No name project'}
                width={seo?.image?.width || image?.width || 1200}
                height={seo?.image?.height || image?.height || 630}
                caption={seo?.image?.caption || image?.caption}
            />
            <div class="px-4 mt-2 md:px-0">
                <ArticleMeta publishDate={publishDate} readingTime={readingTime} />
            </div>

            <header class="mb-8 px-4 mt-12 md:px-0">
                <h1 class="text-3xl leading-tight font-serif font-[800] sm:text-5xl sm:leading-tight" style="color: var(--text-heading)">{title}</h1>
                {description && <p class="mt-4 text-lg text-muted leading-relaxed">{description}</p>}
            </header>
        </article>

        <!-- 16-колоночная сетка -->
        <div class="md:grid md:grid-cols-16 md:gap-9">
            <!-- Боковая панель с Table of Contents -->
            <aside class="hidden sm:block md:col-span-5 lg:col-span-5 min-h-screen">
                <div class="sticky top-8">
                    {tocItems.length > 0 && <TableOfContents headings={tocItems} />}
                    <TagsAndShare tags={tags} shareUrl={href} title={title} />
                    {/* Карточка продукта: показываем если есть productLink в проекте */}
                    {
                        project.data.productLink && (
                            <div class="mt-1">
                                <ProductBannerCard
                                    product={{
                                        data: {
                                            productLink: project.data.productLink,
                                            image: project.data.image || { src: maugliConfig.seo.defaultImage, alt: project.data.title || 'Продукт' },
                                            title: project.data.title || 'Продукт',
                                            productID: project.data.productID
                                        }
                                    }}
                                />
                            </div>
                        )
                    }
                </div>
            </aside>

            <!-- Основной контент -->
            <div class="md:col-span-11 px-4 md:px-0 h-auto lg:col-span-11">
                <!-- Summary/FAQ в начале контента -->
                {
                    project.data.generativeEngineOptimization?.generated &&
                        (project.data.generativeEngineOptimization.generated.summary ||
                            project.data.generativeEngineOptimization.generated.highlights?.length > 0 ||
                            project.data.generativeEngineOptimization.generated.faq?.length > 0) && (
                            <div class="not-prose mb-8">
                                <SummaryFAQCard
                                    summary={project.data.generativeEngineOptimization.generated.summary}
                                    highlights={project.data.generativeEngineOptimization.generated.highlights}
                                    faq={project.data.generativeEngineOptimization.generated.faq}
                                />
                            </div>
                        )
                }

                <div class="prose sm:prose-lg lg:prose-xl max-w-none">
                    <Content />
                </div>

                <!-- Блок тегов и кнопки поделиться под контентом -->
                <ContentFooter tags={tags} shareUrl={href} title={title} basePath="/projects" class="hidden sm:block" />

                {/* Мобильный блок: поделиться и "Больше о продукте" в один ряд */}
                <ContentFooter tags={tags} shareUrl={href} title={title} basePath="/projects" class="sm:hidden" productLink={project.data.productLink} />

                <!-- Блок "Еще по теме" в контенте -->
                {
                    (prevProject || nextProject) && (
                        <div class="my-16 sm:my-24">
                            <h2 class="mb-12 text-xl font-serif sm:mb-16 sm:text-2xl text-heading">{moreByTag}</h2>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8">
                                {nextProject && <ProjectPreview project={nextProject} headingLevel="h3" />}
                                {prevProject && <ProjectPreview project={prevProject} headingLevel="h3" />}
                            </div>
                        </div>
                    )
                }
            </div>
        </div>
    </div>
</BaseLayout>
