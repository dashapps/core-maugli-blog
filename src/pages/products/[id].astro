---
import { render, type CollectionEntry } from 'astro:content';
import ArticleMeta from '../../components/ArticleMeta.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import ContentFooter from '../../components/ContentFooter.astro';
import FAQCard from '../../components/FAQCard.astro';
import HeroImage from '../../components/HeroImage.astro';
import PostPreview from '../../components/PostPreview.astro';
import ProjectPreview from '../../components/ProjectPreview.astro';
import SummaryCard from '../../components/SummaryCard.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import TagsAndShare from '../../components/TagsAndShare.astro';
import { maugliConfig } from '../../config/maugli.config';
import { LANGUAGES } from '../../i18n/languages';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getFilteredCollection } from '../../utils/content-loader';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { calculateReadingTime } from '../../utils/reading-time';

const dicts: Record<string, any> = Object.fromEntries(LANGUAGES.map((l) => [l.code, l.dict]));
const lang: string = typeof maugliConfig.defaultLang === 'string' && dicts[maugliConfig.defaultLang] ? maugliConfig.defaultLang : 'en';
const dict = dicts[lang] || dicts['en'];
const articlesByTag = dict.pages?.productsId?.articlesByTag || dicts['en'].pages.productsId.articlesByTag;
const casesByTag = dict.pages?.productsId?.casesByTag || dicts['en'].pages.productsId.casesByTag;

export async function getStaticPaths() {
    const products = (await getFilteredCollection('products')).sort(sortItemsByDateDesc);
    return products.map((product) => ({
        params: { id: product.id },
        props: { product }
    }));
}

type Props = {
    product: CollectionEntry<'products'>;
};

const { href } = Astro.url;
const { product } = Astro.props;
const { title, description, seo, image, tags = [], publishDate } = product.data;
const { Content, headings } = await render(product);

// Вычисляем время чтения на основе контента
const readingTime = calculateReadingTime(product.body || '');

// Преобразуем встроенные заголовки Astro в нужный формат
const tocItems = headings
    .filter((heading) => heading.depth === 2 || heading.depth === 3)
    .map((heading) => ({
        title: heading.text,
        id: heading.slug
    }));

// Получаем связанные статьи (blog) и кейсы (projects), где productID совпадает с productID продукта
const relatedPosts = (await getFilteredCollection('blog')).filter((post) => post.data.productID === product.data.productID);
const relatedProjects = (await getFilteredCollection('projects')).filter((project) => project.data.productID === product.data.productID);

// Сортировка: сначала featured, потом по дате
const sortByFeaturedAndDate = (a, b) => {
    if ((b.data.isFeatured ? 1 : 0) !== (a.data.isFeatured ? 1 : 0)) return (b.data.isFeatured ? 1 : 0) - (a.data.isFeatured ? 1 : 0);
    return (b.data.publishDate?.getTime?.() || 0) - (a.data.publishDate?.getTime?.() || 0);
};

const sortedPosts = relatedPosts.sort(sortByFeaturedAndDate);
const sortedProjects = relatedProjects.sort(sortByFeaturedAndDate);
const moreLabel = dict.buttons?.more || dicts['en'].buttons.more || 'More';
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? description} image={seo?.image} pageType="article" showHeader={false} fullWidth={true}>
    <div class="w-full max-w-none lg:max-w-[1280px] mx-auto lg:px-8 mt-2">
        <div class="px-4 md:px-0">
            <Breadcrumbs />
        </div>
        <article class="mb-16 sm:mb-24 max-w-3xl mx-auto lg:max-w-none">
            {
                (seo?.image?.src || image?.src) && (
                    <HeroImage
                        src={seo?.image?.src || image?.src}
                        alt={seo?.image?.alt || image?.alt || title || 'Продукт без названия'}
                        width={seo?.image?.width || image?.width || 1200}
                        height={seo?.image?.height || image?.height || 630}
                        caption={seo?.image?.caption || image?.caption}
                    />
                )
            }
            <div class="px-4 mt-2 md:px-0">
                <ArticleMeta publishDate={publishDate} readingTime={readingTime} />
            </div>
            <header class="mb-8 px-4 md:px-0">
                <h1 class="text-3xl leading-tight font-serif font-[800] sm:text-5xl sm:leading-tight" style="color: var(--text-heading)">{title}</h1>
                {description && <p class="mt-4 text-lg text-muted leading-relaxed">{description}</p>}
            </header>
        </article>
        <div class="md:grid md:grid-cols-16 md:gap-9">
            <aside class="hidden sm:block md:col-span-5 lg:col-span-5 min-h-screen">
                <div class="sticky top-8">
                    {tocItems.length > 0 && <TableOfContents headings={tocItems} />}
                    <TagsAndShare tags={tags} shareUrl={href} title={title} />
                </div>
            </aside>
            <div class="md:col-span-11 px-4 md:px-0 h-auto lg:col-span-11">
                {/* Summary для продукта */}
                {
                    product.data.generativeEngineOptimization?.generated &&
                        (product.data.generativeEngineOptimization.generated.summary ||
                            product.data.generativeEngineOptimization.generated.highlights?.length > 0) && (
                            <div class="not-prose mb-8">
                                <SummaryCard
                                    summary={product.data.generativeEngineOptimization.generated.summary}
                                    highlights={product.data.generativeEngineOptimization.generated.highlights}
                                />
                            </div>
                        )
                }
                <div class="prose sm:prose-lg lg:prose-xl max-w-none">
                    <Content />
                </div>

                {/* FAQ после контента продукта */}
                {
                    product.data.generativeEngineOptimization?.generated?.faq && product.data.generativeEngineOptimization.generated.faq.length > 0 && (
                        <div class="not-prose mb-8">
                            <FAQCard faq={product.data.generativeEngineOptimization.generated.faq} />
                        </div>
                    )
                }

                <ContentFooter tags={tags} shareUrl={href} title={title} basePath="/products" />
                {/* Связанные статьи */}
                {
                    sortedPosts.length > 0 && (
                        <div class="my-16">
                            <h2 class="mb-6 text-xl font-serif text-heading">{articlesByTag}</h2>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                {sortedPosts.slice(0, 2).map((post) => (
                                    <PostPreview post={post} />
                                ))}
                            </div>
                            {sortedPosts.length > 2 && (
                                <details class="mt-4 group">
                                    <summary class="cursor-pointer text-brand font-semibold flex items-center gap-2">
                                        {moreLabel} ({sortedPosts.length - 2})
                                        <svg
                                            class="transition-transform duration-300 group-open:rotate-90"
                                            width="16"
                                            height="16"
                                            viewBox="0 0 16 16"
                                            fill="none"
                                            xmlns="http://www.w3.org/2000/svg"
                                        >
                                            <g clip-path="url(#clip0_3589_7018)">
                                                <path
                                                    d="M6.16116 0.382763L12.6315 7.09276C13.1219 7.60137 13.122 8.42598 12.6315 8.93458L12.6136 8.95319C12.1231 9.4618 11.328 9.4618 10.8375 8.95319L4.36717 2.24319C3.87673 1.73459 3.87673 0.909975 4.36717 0.40137L4.38511 0.382763C4.87555 -0.125843 5.67071 -0.125842 6.16116 0.382763Z"
                                                    fill="var(--brand-color)"
                                                />
                                                <path
                                                    d="M12.6136 7.04876L12.6315 7.06737C13.122 7.57597 13.122 8.40059 12.6315 8.90919L6.16116 15.6192C5.67071 16.1278 4.87555 16.1278 4.38511 15.6192L4.36717 15.6006C3.87673 15.092 3.87673 14.2674 4.36717 13.7588L10.8375 7.04876C11.328 6.54016 12.1231 6.54016 12.6136 7.04876Z"
                                                    fill="var(--brand-color)"
                                                />
                                            </g>
                                            <defs>
                                                <clipPath id="clip0_3589_7018">
                                                    <rect width="9" height="16" fill="white" transform="matrix(-1 0 0 1 13 0)" />
                                                </clipPath>
                                            </defs>
                                        </svg>
                                    </summary>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                                        {sortedPosts.slice(2).map((post) => (
                                            <PostPreview post={post} />
                                        ))}
                                    </div>
                                </details>
                            )}
                        </div>
                    )
                }
                {/* Связанные кейсы */}
                {
                    sortedProjects.length > 0 && (
                        <div class="my-16">
                            <h2 class="mb-6 text-xl font-serif text-heading">{casesByTag}</h2>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                {sortedProjects.slice(0, 2).map((project) => (
                                    <ProjectPreview project={project} />
                                ))}
                            </div>
                            {sortedProjects.length > 2 && (
                                <details class="mt-4 group">
                                    <summary class="cursor-pointer text-brand font-semibold flex items-center gap-2">
                                        {moreLabel} ({sortedProjects.length - 2})
                                        <svg
                                            class="transition-transform duration-300 group-open:rotate-90"
                                            width="16"
                                            height="16"
                                            viewBox="0 0 16 16"
                                            fill="none"
                                            xmlns="http://www.w3.org/2000/svg"
                                        >
                                            <g clip-path="url(#clip0_3589_7018)">
                                                <path
                                                    d="M6.16116 0.382763L12.6315 7.09276C13.1219 7.60137 13.122 8.42598 12.6315 8.93458L12.6136 8.95319C12.1231 9.4618 11.328 9.4618 10.8375 8.95319L4.36717 2.24319C3.87673 1.73459 3.87673 0.909975 4.36717 0.40137L4.38511 0.382763C4.87555 -0.125843 5.67071 -0.125842 6.16116 0.382763Z"
                                                    fill="var(--brand-color)"
                                                />
                                                <path
                                                    d="M12.6136 7.04876L12.6315 7.06737C13.122 7.57597 13.122 8.40059 12.6315 8.90919L6.16116 15.6192C5.67071 16.1278 4.87555 16.1278 4.38511 15.6192L4.36717 15.6006C3.87673 15.092 3.87673 14.2674 4.36717 13.7588L10.8375 7.04876C11.328 6.54016 12.1231 6.54016 12.6136 7.04876Z"
                                                    fill="var(--brand-color)"
                                                />
                                            </g>
                                            <defs>
                                                <clipPath id="clip0_3589_7018">
                                                    <rect width="9" height="16" fill="white" transform="matrix(-1 0 0 1 13 0)" />
                                                </clipPath>
                                            </defs>
                                        </svg>
                                    </summary>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                                        {sortedProjects.slice(2).map((project) => (
                                            <ProjectPreview project={project} />
                                        ))}
                                    </div>
                                </details>
                            )}
                        </div>
                    )
                }
            </div>
        </div>
    </div>
</BaseLayout>
