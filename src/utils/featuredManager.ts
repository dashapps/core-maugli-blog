import { getCollection } from 'astro:content';
import fs from 'fs/promises';
import path from 'path';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä featured-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π: blog, products, projects
 */
export class FeaturedManager {
  private static readonly MAX_FEATURED = 3;
  private static readonly CONTENT_DIRS = {
    blog: './src/content/blog',
    products: './src/content/products',
    projects: './src/content/projects',
  };

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ featured –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–æ–º
   */
  static async addFeatured(collection: 'blog' | 'products' | 'projects', newId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const allItems = await getCollection(collection);
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ featured, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
      const currentFeatured = allItems
        .filter(item => item.data.isFeatured)
        .sort((a, b) => a.data.publishDate.getTime() - b.data.publishDate.getTime());
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å MAX_FEATURED, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
      if (currentFeatured.length >= this.MAX_FEATURED) {
        const oldestFeatured = currentFeatured[0];
        await this.removeFeatured(collection, oldestFeatured.id);
        console.log(`üóëÔ∏è –£–±—Ä–∞–ª–∏ –∏–∑ featured —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π: ${oldestFeatured.id}`);
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ featured
      await this.setFeaturedStatus(collection, newId, true);
      console.log(`‚≠ê –î–æ–±–∞–≤–∏–ª–∏ –≤ featured: ${newId}`);
      // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ featured
      await this.logCurrentFeatured(collection);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ featured:', error);
    }
  }

  /**
   * –£–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ featured
   */
  static async removeFeatured(collection: 'blog' | 'products' | 'projects', id: string): Promise<void> {
    await this.setFeaturedStatus(collection, id, false);
  }

  /**
   * –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å isFeatured –≤ frontmatter —Ñ–∞–π–ª–∞
   */
  private static async setFeaturedStatus(collection: 'blog' | 'products' | 'projects', id: string, isFeatured: boolean): Promise<void> {
    const dir = this.CONTENT_DIRS[collection];
    const filePath = path.join(dir, `${id}.md`);
    try {
      const content = await fs.readFile(filePath, 'utf-8');
      const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
      if (!frontmatterMatch) {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω frontmatter –≤ —Ñ–∞–π–ª–µ: ${filePath}`);
      }
      let [, frontmatter, body] = frontmatterMatch;
      if (frontmatter.includes('isFeatured:')) {
        frontmatter = frontmatter.replace(
          /isFeatured:\s*(true|false)/,
          `isFeatured: ${isFeatured}`
        );
      } else {
        if (frontmatter.includes('title:')) {
          frontmatter = frontmatter.replace(
            /(title:.*\n)/,
            `$1isFeatured: ${isFeatured}\n`
          );
        } else {
          frontmatter = `${frontmatter.trim()}\nisFeatured: ${isFeatured}`;
        }
      }
      const updatedContent = `---\n${frontmatter}\n---\n${body}`;
      await fs.writeFile(filePath, updatedContent, 'utf-8');
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ featured —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  static async logCurrentFeatured(collection: 'blog' | 'products' | 'projects'): Promise<void> {
    try {
      const allItems = await getCollection(collection);
      const featured = allItems
        .filter(item => item.data.isFeatured)
        .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime());
      console.log(`\nüìå –¢–µ–∫—É—â–∏–µ featured (${collection}):`);
      featured.forEach((item, index) => {
        console.log(`${index + 1}. ${item.id} (${item.data.publishDate.toLocaleDateString()})`);
      });
      console.log(`üìä –í—Å–µ–≥–æ featured: ${featured.length}/${this.MAX_FEATURED}\n`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ featured:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ featured —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async getFeaturedItems(collection: 'blog' | 'products' | 'projects') {
    try {
      const allItems = await getCollection(collection);
      return allItems
        .filter(item => item.data.isFeatured)
        .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ featured:', error);
      return [];
    }
  }
}
